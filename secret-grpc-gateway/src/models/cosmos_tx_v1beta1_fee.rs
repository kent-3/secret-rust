/*
 * Secret Network
 *
 * A REST interface for queries and transactions
 *
 * The version of the OpenAPI document: v1.12
 *
 * Generated by: https://openapi-generator.tech
 */

/// CosmosTxV1beta1Fee : Fee includes the amount of coins paid in fees and the maximum gas to be used by the transaction. The ratio yields an effective \"gasprice\", which must be above some miminum to be accepted into the mempool.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CosmosTxV1beta1Fee {
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<Vec<crate::models::AllBalancesResponseBalancesInner>>,
    #[serde(rename = "gas_limit", skip_serializing_if = "Option::is_none")]
    pub gas_limit: Option<String>,
    /// if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees. the payer must be a tx signer (and thus have signed this field in AuthInfo). setting this field does *not* change the ordering of required signers for the transaction.
    #[serde(rename = "payer", skip_serializing_if = "Option::is_none")]
    pub payer: Option<String>,
    #[serde(rename = "granter", skip_serializing_if = "Option::is_none")]
    pub granter: Option<String>,
}

impl CosmosTxV1beta1Fee {
    /// Fee includes the amount of coins paid in fees and the maximum gas to be used by the transaction. The ratio yields an effective \"gasprice\", which must be above some miminum to be accepted into the mempool.
    pub fn new() -> CosmosTxV1beta1Fee {
        CosmosTxV1beta1Fee {
            amount: None,
            gas_limit: None,
            payer: None,
            granter: None,
        }
    }
}
