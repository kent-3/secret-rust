/*
 * Secret Network
 *
 * A REST interface for queries and transactions
 *
 * The version of the OpenAPI document: v1.12
 *
 * Generated by: https://openapi-generator.tech
 */

/// CosmosTxSigningV1beta1SignMode : SignMode represents a signing mode with its own security guarantees.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future  - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos SDK. Ref: https://eips.ethereum.org/EIPS/eip-191  Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant, but is not implemented on the SDK by default. To enable EIP-191, you need to pass a custom `TxConfig` that has an implementation of `SignModeHandler` for EIP-191. The SDK may decide to fully support EIP-191 in the future.  Since: cosmos-sdk 0.45.2

/// SignMode represents a signing mode with its own security guarantees.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future  - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos SDK. Ref: https://eips.ethereum.org/EIPS/eip-191  Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant, but is not implemented on the SDK by default. To enable EIP-191, you need to pass a custom `TxConfig` that has an implementation of `SignModeHandler` for EIP-191. The SDK may decide to fully support EIP-191 in the future.  Since: cosmos-sdk 0.45.2
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CosmosTxSigningV1beta1SignMode {
    #[serde(rename = "SIGN_MODE_UNSPECIFIED")]
    Unspecified,
    #[serde(rename = "SIGN_MODE_DIRECT")]
    Direct,
    #[serde(rename = "SIGN_MODE_TEXTUAL")]
    Textual,
    #[serde(rename = "SIGN_MODE_LEGACY_AMINO_JSON")]
    LegacyAminoJson,
    #[serde(rename = "SIGN_MODE_EIP_191")]
    Eip191,
}

impl ToString for CosmosTxSigningV1beta1SignMode {
    fn to_string(&self) -> String {
        match self {
            Self::Unspecified => String::from("SIGN_MODE_UNSPECIFIED"),
            Self::Direct => String::from("SIGN_MODE_DIRECT"),
            Self::Textual => String::from("SIGN_MODE_TEXTUAL"),
            Self::LegacyAminoJson => String::from("SIGN_MODE_LEGACY_AMINO_JSON"),
            Self::Eip191 => String::from("SIGN_MODE_EIP_191"),
        }
    }
}

impl Default for CosmosTxSigningV1beta1SignMode {
    fn default() -> CosmosTxSigningV1beta1SignMode {
        Self::Unspecified
    }
}
