/*
 * Secret Network
 *
 * A REST interface for queries and transactions
 *
 * The version of the OpenAPI document: v1.12
 *
 * Generated by: https://openapi-generator.tech
 */

/// ChannelsResponseChannelsInner : IdentifiedChannel defines a channel with additional port and channel identifier fields.

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ChannelsResponseChannelsInner {
    /// State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.   - STATE_UNINITIALIZED_UNSPECIFIED: Default State  - STATE_INIT: A channel has just started the opening handshake.  - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.  - STATE_OPEN: A channel has completed the handshake. Open channels are ready to send and receive packets.  - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive packets.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering  - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in which they were sent.  - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
    #[serde(rename = "ordering", skip_serializing_if = "Option::is_none")]
    pub ordering: Option<Ordering>,
    #[serde(rename = "counterparty", skip_serializing_if = "Option::is_none")]
    pub counterparty: Option<Box<crate::models::CounterpartyChannelEnd>>,
    #[serde(rename = "connection_hops", skip_serializing_if = "Option::is_none")]
    pub connection_hops: Option<Vec<String>>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "port_id", skip_serializing_if = "Option::is_none")]
    pub port_id: Option<String>,
    #[serde(rename = "channel_id", skip_serializing_if = "Option::is_none")]
    pub channel_id: Option<String>,
}

impl ChannelsResponseChannelsInner {
    /// IdentifiedChannel defines a channel with additional port and channel identifier fields.
    pub fn new() -> ChannelsResponseChannelsInner {
        ChannelsResponseChannelsInner {
            state: None,
            ordering: None,
            counterparty: None,
            connection_hops: None,
            version: None,
            port_id: None,
            channel_id: None,
        }
    }
}

/// State defines if a channel is in one of the following states: CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.   - STATE_UNINITIALIZED_UNSPECIFIED: Default State  - STATE_INIT: A channel has just started the opening handshake.  - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.  - STATE_OPEN: A channel has completed the handshake. Open channels are ready to send and receive packets.  - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive packets.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "STATE_UNINITIALIZED_UNSPECIFIED")]
    UninitializedUnspecified,
    #[serde(rename = "STATE_INIT")]
    Init,
    #[serde(rename = "STATE_TRYOPEN")]
    Tryopen,
    #[serde(rename = "STATE_OPEN")]
    Open,
    #[serde(rename = "STATE_CLOSED")]
    Closed,
}

impl Default for State {
    fn default() -> State {
        Self::UninitializedUnspecified
    }
}
/// - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering  - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in which they were sent.  - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Ordering {
    #[serde(rename = "ORDER_NONE_UNSPECIFIED")]
    NoneUnspecified,
    #[serde(rename = "ORDER_UNORDERED")]
    Unordered,
    #[serde(rename = "ORDER_ORDERED")]
    Ordered,
}

impl Default for Ordering {
    fn default() -> Ordering {
        Self::NoneUnspecified
    }
}
